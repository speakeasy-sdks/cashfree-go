// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type OrdersEntity struct {
	// unique id generated by cashfree for your order
	CfOrderID *int64 `json:"cf_order_id,omitempty"`
	// When the order was created at cashfree's server
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The customer details that are necessary. Note that you can pass dummy details if your use case does not require the customer details.
	CustomerDetails *CustomerDetails `json:"customer_details,omitempty"`
	// Type of the entity.
	Entity      *string  `json:"entity,omitempty"`
	OrderAmount *float64 `json:"order_amount,omitempty"`
	// Currency of the order. Example INR
	OrderCurrency   *string    `json:"order_currency,omitempty"`
	OrderExpiryTime *time.Time `json:"order_expiry_time,omitempty"`
	// order_id sent during the api request
	OrderID *string `json:"order_id,omitempty"`
	// Optional meta details to control how the customer pays and how payment journey completes
	OrderMeta *OrderMeta `json:"order_meta,omitempty"`
	// Additional note for order
	OrderNote *string `json:"order_note,omitempty"`
	// Possible values are
	// - `ACTIVE`: Order does not have a sucessful transaction yet
	// - `PAID`: Order is PAID with one successful transaction
	// - `EXPIRED`: Order was not PAID and not it has expired. No transaction can be initiated for an EXPIRED order.
	//
	OrderStatus *string `json:"order_status,omitempty"`
	// Custom Tags in thr form of {"key":"value"} which can be passed for an order. A maximum of 10 tags can be added
	OrderTags        map[string]string    `json:"order_tags,omitempty"`
	PaymentSessionID *string              `json:"payment_session_id,omitempty"`
	Payments         *PaymentURLObject    `json:"payments,omitempty"`
	Refunds          *RefundURLObject     `json:"refunds,omitempty"`
	Settlements      *SettlementURLObject `json:"settlements,omitempty"`
}

func (o *OrdersEntity) GetCfOrderID() *int64 {
	if o == nil {
		return nil
	}
	return o.CfOrderID
}

func (o *OrdersEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *OrdersEntity) GetCustomerDetails() *CustomerDetails {
	if o == nil {
		return nil
	}
	return o.CustomerDetails
}

func (o *OrdersEntity) GetEntity() *string {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *OrdersEntity) GetOrderAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.OrderAmount
}

func (o *OrdersEntity) GetOrderCurrency() *string {
	if o == nil {
		return nil
	}
	return o.OrderCurrency
}

func (o *OrdersEntity) GetOrderExpiryTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.OrderExpiryTime
}

func (o *OrdersEntity) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *OrdersEntity) GetOrderMeta() *OrderMeta {
	if o == nil {
		return nil
	}
	return o.OrderMeta
}

func (o *OrdersEntity) GetOrderNote() *string {
	if o == nil {
		return nil
	}
	return o.OrderNote
}

func (o *OrdersEntity) GetOrderStatus() *string {
	if o == nil {
		return nil
	}
	return o.OrderStatus
}

func (o *OrdersEntity) GetOrderTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.OrderTags
}

func (o *OrdersEntity) GetPaymentSessionID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentSessionID
}

func (o *OrdersEntity) GetPayments() *PaymentURLObject {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *OrdersEntity) GetRefunds() *RefundURLObject {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *OrdersEntity) GetSettlements() *SettlementURLObject {
	if o == nil {
		return nil
	}
	return o.Settlements
}
